Continue moving "business logic" into the model

Synchronisation of two motors should be done at the motor level
and not in the UI loop. Motor function should take a pointer to
the "driver" motor and perhaps a callback for determining position
of the "driven" motor. This will allow for non-linear synchronisation,
for example turning a radius.

All "Axis1..." and "Axis2..." references should be replaced with an
array to allow for future expansion.

Convert to cmake

Address the "Mode" concept which currently provides pseudo-modal
"dialogs" interleaved into program flow, and is proving difficult
to maintain. If all motors are stopped during a "dialog" then we
can put them all on a separate flow.

Add a leader key to work on all axes, maybe \ as it's next to z & x
on the keyboard. So \z for example will zero both Z and X.

Add ability to pick up existing memories if the stepper loses the plot

Think about incorporating reading from scales to make position reporting
accurate rather than estimated

Add motor "conversion factors" or steps per revolution including gearing
as a config item

Automate threading operations (or all?) to automatically return after the
target step has been reached and a key is pressed

Investigate RPM stopping above a certain rotational speed (maybe need
to revisit gearing of rotary encoder)

Rotary encoder doesn't currently do anything with rotation direction,
so getPositionDegrees() fails to take into account manual back-rotation
of the chuck/spindle

Consider adding support for some form of switch / sensor to prevent
carriage movement outside of specific points (or mandate position
checks at start-up to do this in software only?)

Much as I dislike the idea, I should support imperial units :/
